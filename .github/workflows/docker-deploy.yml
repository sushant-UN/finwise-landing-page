name: build docker image to ECR

on:
  push:
    branches: ["env1", "env2", "env3", "staging"]

jobs:
  build:
    runs-on: ubuntu-22.04

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: checkout the repo
        uses: actions/checkout@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::801313320359:role/eks-github-role
          aws-region: ap-south-1

      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get the latest image tag and update new tag
        id: get_latest_tag
        env:
          REPOSITORY: k8s/ua/${{ env.branch_name }}/site
        run: |
          latest_tag=$(aws ecr describe-images \
            --repository-name $REPOSITORY \
            --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
            --output text)
          if [[ "$latest_tag" == "None" ]]; then
            latest_tag="1.0"
          else
            major=$(echo $latest_tag | cut -d '.' -f 1)
            minor=$(echo $latest_tag | cut -d '.' -f 2)
            latest_tag="${major}.$((minor+1))"
          fi
          echo "Latest tag is $latest_tag"
          echo "::set-output name=tag::$latest_tag"

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: k8s/ua/${{ env.branch_name }}/site
          # IMAGE_TAG: ${{ github.sha }}
        run: |
          aws s3 cp s3://stg-uniacco-release/stg-kubernetes-release/stg-fe/env/${{ env.branch_name }}/.env.local .
          docker build --progress=plain --no-cache -t $REGISTRY/$REPOSITORY:${{ steps.get_latest_tag.outputs.tag }} .
          docker push $REGISTRY/$REPOSITORY:${{ steps.get_latest_tag.outputs.tag }}

      - name: copy assets to S3
        if: github.ref == 'refs/heads/staging'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: k8s/ua/${{ env.branch_name }}/site
        run: |
          mkdir -p .next/static
          aws s3 rm s3://stg-assets-uniacco.aslfamily.com/_next/static/ --recursive
          docker create --name temp-container $REGISTRY/$REPOSITORY:${{ steps.get_latest_tag.outputs.tag }}
          docker cp temp-container:/home/nonroot/uniacco-site/.next/static .next/static
          aws s3 cp .next/static s3://stg-assets-uniacco.aslfamily.com/_next/static/ --recursive
          docker rm temp-container
